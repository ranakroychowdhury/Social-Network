CREATE TABLE USERS(
	userID NUMBER CONSTRAINT USER_PK PRIMARY KEY,
	birthDate CHAR(2) NOT NULL,
	birthMonth CHAR(2) NOT NULL,
	birthYear CHAR(4) NOT NULL,
	profilePic BLOB,
	userName VARCHAR2(30) UNIQUE NOT NULL,
	password VARCHAR2(200) CHECK(LENGTH(password) >=8), 
	firstName VARCHAR2(20) NOT NULL,
	lastName VARCHAR2(20) NOT NULL,
	email VARCHAR2(50) CHECK(email LIKE '_%@_%._%') UNIQUE NOT NULL,
	phone VARCHAR2(15),
	gender VARCHAR2(6) CHECK( gender IN('MALE', 'FEMALE', 'OTHERS')),
	country VARCHAR2(50) NOT NULL,
	state VARCHAR2(50) NOT NULL,
	city VARCHAR2(50) NOT NULL,
	zipCode VARCHAR2(10) NOT NULL,
	coverPhoto BLOB
);



CREATE TABLE GROUPS(
	groupID NUMBER CONSTRAINT GROUP_PK PRIMARY KEY,
	groupName VARCHAR2(50) NOT NULL,
	description VARCHAR2(2000),
	creatorID NUMBER,
	CONSTRAINT GROUP_CREATOR_FK FOREIGN KEY(creatorID) REFERENCES USERS(userID) ON DELETE SET NULL
);




CREATE TABLE USER_TO_GROUPS(
	userID NUMBER,
	groupID NUMBER,
	memberType VARCHAR2(20),
	CONSTRAINT USER_TO_GROUPS_PK PRIMARY KEY (userID, groupID),
	CONSTRAINT GROUP_MEMBER_FK FOREIGN KEY(userID) REFERENCES USERS(userID) ON DELETE CASCADE,
	CONSTRAINT GROUP_FK FOREIGN KEY(groupID) REFERENCES GROUPS(groupID) ON DELETE CASCADE
);


CREATE TABLE POSTS(
	postID NUMBER CONSTRAINT POST_PK PRIMARY KEY,
	content VARCHAR2(4000) NOT NULL,
	likes NUMBER DEFAULT 0,
	visibilty VARCHAR2(15),
	posterID NUMBER,
	dateTime DATE DEFAULT SYSDATE,
	CONSTRAINT POST_CREATOR_FK FOREIGN KEY(posterID) 
REFERENCES USERS(userID) ON DELETE CASCADE
);



CREATE TABLE GROUP_POSTS(
	postID NUMBER CONSTRAINT GROUP_POST_PK PRIMARY KEY,
	groupID NUMBER,
	seenBy NUMBER DEFAULT 0,
	CONSTRAINT GP_GROUP_FK FOREIGN KEY(groupID) REFERENCES GROUPS(groupID) ON DELETE CASCADE,
	CONSTRAINT GP_POST_FK FOREIGN KEY(postID) REFERENCES POSTS(postID) ON DELETE CASCADE
);




CREATE TABLE COMMENTS(
	commentID NUMBER CONSTRAINT COMMENT_PK PRIMARY KEY,
	likes NUMBER DEFAULT 0,
	content VARCHAR2(4000) NOT NULL,
	commenterID NUMBER,
	postID NUMBER,
	dateTime DATE DEFAULT SYSDATE,
	CONSTRAINT COMMENT_CREATOR_FK FOREIGN KEY(commenterID) 
REFERENCES USERS(userID) ON DELETE CASCADE,
	CONSTRAINT POST_GROUP_FK FOREIGN KEY(postID) 
REFERENCES POSTS(postID) ON DELETE CASCADE
);




CREATE TABLE ALBUMS(
	albumID NUMBER CONSTRAINT ALBUM_PK PRIMARY KEY,
	albumName VARCHAR2(50) NOT NULL,
	creatorID NUMBER,
	CONSTRAINT ALBUM_CREATOR_FK FOREIGN KEY(creatorID) 
REFERENCES USERS(userID) ON DELETE CASCADE
);




CREATE TABLE PICTURES(
	pictureID NUMBER CONSTRAINT PICTURE_PK PRIMARY KEY,
	pictureName VARCHAR2(20),
	likes NUMBER DEFAULT 0,
	caption VARCHAR2(200),
	userID NUMBER,
	albumID NUMBER,
	picture BLOB,
	dateTime DATE DEFAULT SYSDATE,
	CONSTRAINT PICTURE_POSTER_FK FOREIGN KEY(userID) 
REFERENCES USERS(userID) ON DELETE CASCADE,
	CONSTRAINT PICTURE_ALBUM_FK FOREIGN KEY(albumID) 
REFERENCES ALBUMS(albumID) ON DELETE CASCADE
);








CREATE TABLE ALBUM_COLLABORATES_USER(
	albumID NUMBER,
	userID NUMBER,
	CONSTRAINT ALBUM_COLLABORATES_USER_PK PRIMARY KEY (albumID, userID),
	CONSTRAINT USER_FK FOREIGN KEY(userID) 
REFERENCES USERS(userID) ON DELETE CASCADE,
	CONSTRAINT ALBUM_FK FOREIGN KEY(albumID) 
REFERENCES ALBUMS(albumID) ON DELETE CASCADE
);
	




CREATE TABLE MESSAGE_THREAD(
	threadID NUMBER CONSTRAINT MESSAGE_THREAD_PK PRIMARY KEY,
	startDate DATE DEFAULT SYSDATE

);




CREATE TABLE USER_MSG_THREAD(
	userID NUMBER,
	threadID NUMBER,
	joinDate DATE DEFAULT SYSDATE,
	CONSTRAINT USERPARTMSG_PK PRIMARY KEY (userID, threadID),
	CONSTRAINT USER_MSG_USER_FK FOREIGN KEY(userID) REFERENCES USERS(userID) ON DELETE CASCADE,
	CONSTRAINT USER_MSG_THREAD_FK FOREIGN KEY(threadID) REFERENCES MESSAGE_THREAD(threadID) ON DELETE CASCADE
);




CREATE TABLE MESSAGES(
	messagedID NUMBER CONSTRAINT MESSAGE_PK PRIMARY KEY,
	threadID NUMBER,
	senderID NUMBER,
	messageContent VARCHAR2(4000) NOT NULL,
	dateTime DATE DEFAULT SYSDATE,
	CONSTRAINT MSG_THREAD_FK FOREIGN KEY(threadID) REFERENCES MESSAGE_THREAD(threadID) ON DELETE CASCADE,
	CONSTRAINT MSG_USER_FK FOREIGN KEY(senderID) REFERENCES USERS(userID) ON DELETE CASCADE
);




CREATE TABLE EVENTS(
	eventID NUMBER CONSTRAINT EVENTS_PK PRIMARY KEY,
	description VARCHAR2(300) NOT NULL,
	eventDate CHAR(2) NOT NULL,
	eventMonth CHAR(2) NOT NULL,
	eventYear CHAR(2) NOT NULL,
	eventHour CHAR(2) NOT NULL,
	eventMinute CHAR(2) NOT NULL,
	country VARCHAR2(20) NOT NULL,
	city VARCHAR2(20) NOT NULL,
	roadNo NUMBER NOT NULL,
	buildingNo NUMBER NOT NULL,
	eventType VARCHAR2(20),
	creatorID NUMBER,
	CONSTRAINT EVENT_CREATOR_FK FOREIGN KEY(creatorID) REFERENCES USERS(userID) ON DELETE CASCADE
);





CREATE TABLE EVENT_INVITE_USER(
	eventID NUMBER,
	userID NUMBER,
	joinStatus VARCHAR2(10),
	CONSTRAINT EVENT_INVITE_PK PRIMARY KEY (userID, eventID),
	CONSTRAINT INVITE_USER_FK FOREIGN KEY(userID) REFERENCES USERS(userID) ON DELETE CASCADE,
	CONSTRAINT INVITE_EVENT_FK FOREIGN KEY(eventID) REFERENCES EVENTS(eventID) ON DELETE CASCADE
);




CREATE TABLE USER_JOIN_EVENT(
	eventID NUMBER,
	userID NUMBER,
	
	CONSTRAINT EVENT_JOIN_PK PRIMARY KEY (userID, eventID),
	CONSTRAINT USER_JOIN_FK FOREIGN KEY(userID) REFERENCES USERS(userID) ON DELETE CASCADE,
	CONSTRAINT EVENT_JOIN_FK FOREIGN KEY(eventID) REFERENCES EVENTS(eventID) ON DELETE CASCADE
);




CREATE TABLE FRIEND_REQUEST_TABLE(
	user1ID NUMBER,
	user2ID NUMBER,
	status VARCHAR2(10),
	CONSTRAINT FRIEND_REQUEST_PK PRIMARY KEY (user1ID, user2ID),
	CONSTRAINT REQ_USER1_FK FOREIGN KEY(user1ID) REFERENCES USERS(userID) ON DELETE CASCADE,
	CONSTRAINT REQ_USER2_FK FOREIGN KEY(user2ID) REFERENCES USERS(userID) ON DELETE CASCADE
);




CREATE TABLE FRIEND_TABLE(
	user1ID NUMBER,
	user2ID NUMBER,
	dateTime DATE DEFAULT SYSDATE,
	CONSTRAINT FRIEND_PK PRIMARY KEY (user1ID, user2ID),
	CONSTRAINT FRIEND_USER1_FK FOREIGN KEY(user1ID) REFERENCES USERS(userID) ON DELETE CASCADE,
	CONSTRAINT FRIEND_USER2_FK FOREIGN KEY(user2ID) REFERENCES USERS(userID) ON DELETE CASCADE
);





SELECT postID 	
		FROM POSTS P
		WHERE (P.posterID = USER1_ID AND USER2_ID IN 
								(SELECT commenterID
								FROM COMMENTS C
								WHERE C.postID = P.postID))
					UNION
			(P.posterID = USER2_ID AND USER1_ID IN 
								(SELECT commenterID
								FROM COMMENTS C
								WHERE C.postID = P.postID))



SELECT U.USERID, USERNAME, FIRSTNAME, LASTNAME
FROM USERS U JOIN USER_TO_GROUPS G ON(U.USERID = G.USERID)
WHERE G.GROUPID = 1 AND U.USERID IN (SELECT USER2ID
						     FROM FRIEND_TABLE
                    			     WHERE USER1ID = 1
			                         UNION
                    			     SELECT USER1ID
			                         FROM FRIEND_TABLE
                    			     WHERE USER2ID = 1)

	


